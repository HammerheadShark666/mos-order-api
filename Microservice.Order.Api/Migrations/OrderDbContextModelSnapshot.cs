// <auto-generated />
using System;
using Microservice.Order.Api.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Microservice.Order.Api.Migrations
{
    [DbContext(typeof(OrderDbContext))]
    partial class OrderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("OrderNumberCounter");

            modelBuilder.Entity("Microservice.Order.Api.Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressForename")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AddressSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR OrderNumberCounter");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(19, 2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("MSOS_Order");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d3ca8ea8-97d6-41ce-937f-e2d9a905d61e"),
                            AddressForename = "Intergration_Test",
                            AddressSurname = "Intergration_Test",
                            Created = new DateTime(2024, 7, 27, 14, 25, 35, 752, DateTimeKind.Local).AddTicks(724),
                            CustomerAddressId = new Guid("724cbd34-3dff-4e2a-a413-48825f1ab3b9"),
                            CustomerId = new Guid("6c84d0a3-0c0c-435f-9ae0-4de09247ee15"),
                            LastUpdated = new DateTime(2024, 7, 27, 14, 25, 35, 752, DateTimeKind.Local).AddTicks(767),
                            OrderNumber = 1,
                            OrderStatusId = 1,
                            Total = 25.99m
                        },
                        new
                        {
                            Id = new Guid("7b5673fa-166e-417e-a0bf-d2c7d72b6ab3"),
                            AddressForename = "Intergration_Test",
                            AddressSurname = "Intergration_Test",
                            Created = new DateTime(2024, 7, 27, 14, 25, 35, 752, DateTimeKind.Local).AddTicks(776),
                            CustomerAddressId = new Guid("724cbd34-3dff-4e2a-a413-48825f1ab3b9"),
                            CustomerId = new Guid("6c84d0a3-0c0c-435f-9ae0-4de09247ee15"),
                            LastUpdated = new DateTime(2024, 7, 27, 14, 25, 35, 752, DateTimeKind.Local).AddTicks(778),
                            OrderNumber = 2,
                            OrderStatusId = 2,
                            Total = 19.98m
                        },
                        new
                        {
                            Id = new Guid("6f3e950c-5502-491f-911d-02e112318705"),
                            AddressForename = "Intergration_Test",
                            AddressSurname = "Intergration_Test",
                            Created = new DateTime(2024, 7, 27, 14, 25, 35, 752, DateTimeKind.Local).AddTicks(782),
                            CustomerAddressId = new Guid("724cbd34-3dff-4e2a-a413-48825f1ab3b9"),
                            CustomerId = new Guid("6c84d0a3-0c0c-435f-9ae0-4de09247ee15"),
                            LastUpdated = new DateTime(2024, 7, 27, 14, 25, 35, 752, DateTimeKind.Local).AddTicks(784),
                            OrderNumber = 3,
                            OrderStatusId = 3,
                            Total = 2.50m
                        },
                        new
                        {
                            Id = new Guid("e7cc2320-6443-46bd-93f4-a2ae7b437287"),
                            AddressForename = "Intergration_Test2",
                            AddressSurname = "Intergration_Test2",
                            Created = new DateTime(2024, 7, 27, 14, 25, 35, 752, DateTimeKind.Local).AddTicks(789),
                            CustomerAddressId = new Guid("b88ef4ce-739f-4c1b-b6d6-9d0727515de8"),
                            CustomerId = new Guid("929eaf82-e4fd-4efe-9cae-ce4d7e32d159"),
                            LastUpdated = new DateTime(2024, 7, 27, 14, 25, 35, 752, DateTimeKind.Local).AddTicks(790),
                            OrderNumber = 4,
                            OrderStatusId = 4,
                            Total = 51.47m
                        },
                        new
                        {
                            Id = new Guid("30cfccfe-038c-4f20-a306-f0a2a9df0829"),
                            AddressForename = "Intergration_Test2",
                            AddressSurname = "Intergration_Test2",
                            Created = new DateTime(2024, 7, 27, 14, 25, 35, 752, DateTimeKind.Local).AddTicks(795),
                            CustomerAddressId = new Guid("b88ef4ce-739f-4c1b-b6d6-9d0727515de8"),
                            CustomerId = new Guid("929eaf82-e4fd-4efe-9cae-ce4d7e32d159"),
                            LastUpdated = new DateTime(2024, 7, 27, 14, 25, 35, 752, DateTimeKind.Local).AddTicks(797),
                            OrderNumber = 5,
                            OrderStatusId = 1,
                            Total = 24.98m
                        });
                });

            modelBuilder.Entity("Microservice.Order.Api.Domain.OrderItem", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(19, 2)");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("MSOS_OrderItem");

                    b.HasData(
                        new
                        {
                            OrderId = new Guid("d3ca8ea8-97d6-41ce-937f-e2d9a905d61e"),
                            ProductId = new Guid("29a75938-ce2d-473b-b7fe-2903fe97fd6e"),
                            Name = "Infinity Kings",
                            ProductTypeId = 1,
                            Quantity = 1,
                            UnitPrice = 9.99m
                        },
                        new
                        {
                            OrderId = new Guid("d3ca8ea8-97d6-41ce-937f-e2d9a905d61e"),
                            ProductId = new Guid("07c06c3f-0897-44b6-ae05-a70540e73a12"),
                            Name = "Infinity Son",
                            ProductTypeId = 1,
                            Quantity = 1,
                            UnitPrice = 7.50m
                        },
                        new
                        {
                            OrderId = new Guid("d3ca8ea8-97d6-41ce-937f-e2d9a905d61e"),
                            ProductId = new Guid("6131ce7e-fb11-4608-a3d3-f01caee2c465"),
                            Name = "Infinity Reaper",
                            ProductTypeId = 1,
                            Quantity = 1,
                            UnitPrice = 8.50m
                        },
                        new
                        {
                            OrderId = new Guid("7b5673fa-166e-417e-a0bf-d2c7d72b6ab3"),
                            ProductId = new Guid("37544155-da95-49e8-b7fe-3c937eb1de98"),
                            Name = "Wild Love",
                            ProductTypeId = 1,
                            Quantity = 2,
                            UnitPrice = 9.99m
                        },
                        new
                        {
                            OrderId = new Guid("6f3e950c-5502-491f-911d-02e112318705"),
                            ProductId = new Guid("f3fcab1f-1c11-47f5-9e11-7868a88408e6"),
                            Name = "Thunderhead",
                            ProductTypeId = 1,
                            Quantity = 1,
                            UnitPrice = 2.50m
                        },
                        new
                        {
                            OrderId = new Guid("e7cc2320-6443-46bd-93f4-a2ae7b437287"),
                            ProductId = new Guid("23608dce-2142-4d2b-b909-948316b5efaf"),
                            Name = "Scythe",
                            ProductTypeId = 1,
                            Quantity = 1,
                            UnitPrice = 3.50m
                        },
                        new
                        {
                            OrderId = new Guid("e7cc2320-6443-46bd-93f4-a2ae7b437287"),
                            ProductId = new Guid("ecf65c56-5670-473b-9f20-fb0b191c2f0f"),
                            Name = "Saltblood",
                            ProductTypeId = 1,
                            Quantity = 3,
                            UnitPrice = 15.99m
                        },
                        new
                        {
                            OrderId = new Guid("30cfccfe-038c-4f20-a306-f0a2a9df0829"),
                            ProductId = new Guid("29a75938-ce2d-473b-b7fe-2903fe97fd6e"),
                            Name = "Infinity Kings",
                            ProductTypeId = 1,
                            Quantity = 2,
                            UnitPrice = 9.99m
                        },
                        new
                        {
                            OrderId = new Guid("30cfccfe-038c-4f20-a306-f0a2a9df0829"),
                            ProductId = new Guid("07c06c3f-0897-44b6-ae05-a70540e73a12"),
                            Name = "Infinity Son",
                            ProductTypeId = 1,
                            Quantity = 2,
                            UnitPrice = 7.50m
                        });
                });

            modelBuilder.Entity("Microservice.Order.Api.Domain.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("Id");

                    b.ToTable("MSOS_OrderStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Created"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Paid"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Dispatched"
                        },
                        new
                        {
                            Id = 4,
                            Status = "Recieved"
                        },
                        new
                        {
                            Id = 5,
                            Status = "Completed"
                        });
                });

            modelBuilder.Entity("Microservice.Order.Api.Domain.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("Id");

                    b.ToTable("MSOS_ProductType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Book"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Music"
                        });
                });

            modelBuilder.Entity("Microservice.Order.Api.Domain.Order", b =>
                {
                    b.HasOne("Microservice.Order.Api.Domain.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("Microservice.Order.Api.Domain.OrderItem", b =>
                {
                    b.HasOne("Microservice.Order.Api.Domain.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microservice.Order.Api.Domain.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("Microservice.Order.Api.Domain.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
